<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sdf.dao.UserMapper">

    <resultMap id="user" type="com.sdf.domain.User">
        <id property="uid" column="uid"/>
        <result property="username" column="username"/>
        <result property="passwd" column="passwd"/>
        <result property="address" column="address"/>
        <result property="gender" column="gender"/>
        <result property="age" column="age"/>
        <result property="identify" column="identify"/>
        <result property="user_phone" column="user_phone"/>
     </resultMap>
    <!--User userLogin(User user);-->
    <select id="userLogin" resultMap="user">
        select * from USER
        <where>
            username = #{user.username} and passwd = #{user.passwd}
        </where>
    </select>

    <!--boolean UserRegist(User user);-->

    <insert id="userRegist">
        insert into user values
        (null,#{user.username},#{user.passwd},#{user.address},
        #{user.gender},#{user.age},#{user.identify},#{user.user_phone})
    </insert>

    <resultMap id="order" type="com.sdf.domain.Order">
        <id column="uid" property="uid"/>
        <result column="sender_address" property="sender_address"/>
        <result column="sender_name" property="sender_name"/>
        <result column="sender_phone" property="sender_phone"/>
        <result column="receiver_address" property="receiver_address"/>
        <result column="receiver_name" property="receiver_name"/>
        <result column="receiver_phone" property="receiver_phone"/>
        <result column="order_id" property="order_id"/>
        <result column="sign_for" property="sign_for"/>
        <result column="sign_date" property="sign_date"/>
        <result column="weight" property="weight"/>
        <result column="type" property="type"/>
        <result column="real_time_address" property="real_time_address"/>
    </resultMap>
    <!--Order findOrderById(Integer id);-->
    <select id="findOrderById" resultMap="order">
        SELECT * FROM `order` WHERE order_id = #{order_id}
    </select>

    <resultMap id="hisOrder" type="com.sdf.domain.HistoricalOrder">
        <id property="id" column="id"/>
        <result property="uid" column="uid"/>
        <result property="order_id" column="order_id"/>
    </resultMap>
    <!--List<HistoricalOrder> findHistoricalByUid(Integer uid);-->
    <select id="findHistoricalByUid" resultMap="hisOrder">
        select * from `historical_order`
        <where>
            uid = #{uid}
        </where>
    </select>


    <!--List<Order> findOrdersByList(List<HistoricalOrder> historicalOrders);-->
    <select id="findOrdersByList" resultMap="order">
        select * from `order`
        <where>

            <foreach collection="hises"
                     open="order_id in(" item="order" separator="," close=")">
                #{order.order_id}
            </foreach>
        </where>
    </select>

    <!--boolean mailingByUid(Order order);-->
   <insert id="mailingByUid">
       insert into `order` values
       (#{order.uid}, #{order.sender_address}, #{order.sender_name},
        #{order.sender_phone}, #{order.receiver_address}, #{order.receiver_name},
        #{order.receiver_phone}, null, 'N', null, #{order.weight},
        #{order.type}, #{order.sender_address}
       )
   </insert>

    <!--Boolean changeUserInfo(@Param("user") User user);-->
    <update id="changeUserInfo">
        update `user`
        <set>
            username = #{user.username},
            address = #{user.address},
            gender = #{user.gender},
            age = #{user.age},
            identify = #{user.identify}
        </set>
        <where>
            uid = #{user.uid}
        </where>
    </update>

    <!--Boolean changeOrderInfo(@Param("user") User user);-->
    <update id="changeOrderInfo">
        update `order`
        <set>
            sender_name = #{user.username},
            sender_address = #{user.address}
        </set>
        <where>
            uid = #{user.uid}
        </where>
    </update>

    <!--User findUserById(@Param("user") User user);-->
    <select id="findUserById" resultMap="user">
        select * from user
        <where>
            uid = #{user.uid}
        </where>
    </select>


</mapper>